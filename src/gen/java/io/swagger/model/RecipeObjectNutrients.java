/*
 * Chomp Food & Recipe Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. * Get a **Food Data API** key at **[https://chompthis.com/api](https://chompthis.com/api/)**. * Get a **Recipe Data API** key at **[https://chompthis.com/api/recipes](https://chompthis.com/api/recipes/)**.  ### Getting Started   * Subscribe to the **[Food Data API](https://chompthis.com/api/#pricing)** or the **[Recipe Data API](https://chompthis.com/api/recipes/#pricing)**.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Recipe response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/example-recipe-response.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### I'm a Premium subscriber. How do I access the API?   * All Premium subscribers must pass in a unique user ID for each user on their platform that is accessing data from the Chomp API. A user ID can be any string of letters and numbers that you assign to your user. Simply add \"user_id\" as a URL parameter when calling the API. *You must add a \"user_id\" URL parameter to every call you make to ANY endpoint.*     * **Example**        > ```ENDPOINT.php?api_key=API_KEY&code=CODE&user_id=USER_ID```  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Food Data API Subscription Options &raquo;](https://chompthis.com/api/)     * [Recipe Data API Subscription Options &raquo;](https://chompthis.com/api/recipes/)     * [Food Data API Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)     * [Recipe Data API Cost Calculator &raquo;](https://chompthis.com/api/recipes/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.model.RecipeObjectNutrientsCalories;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * An object containing nutrient information for this recipe
 */
@Schema(description = "An object containing nutrient information for this recipe")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2021-03-09T22:27:18.219Z[GMT]")public class RecipeObjectNutrients   {
  @JsonProperty("calories")
  private List<RecipeObjectNutrientsCalories> calories = null;

  @JsonProperty("daily_values")
  private List<RecipeObjectNutrientsCalories> dailyValues = null;

  @JsonProperty("fat")
  private List<RecipeObjectNutrientsCalories> fat = null;

  @JsonProperty("carbs")
  private List<RecipeObjectNutrientsCalories> carbs = null;

  @JsonProperty("vitamins")
  private List<RecipeObjectNutrientsCalories> vitamins = null;

  public RecipeObjectNutrients calories(List<RecipeObjectNutrientsCalories> calories) {
    this.calories = calories;
    return this;
  }

  public RecipeObjectNutrients addCaloriesItem(RecipeObjectNutrientsCalories caloriesItem) {
    if (this.calories == null) {
      this.calories = new ArrayList<RecipeObjectNutrientsCalories>();
    }
    this.calories.add(caloriesItem);
    return this;
  }

  /**
   * An array containing information for calories found in this recipe
   * @return calories
   **/
  @JsonProperty("calories")
  @Schema(description = "An array containing information for calories found in this recipe")
  @Valid
  public List<RecipeObjectNutrientsCalories> getCalories() {
    return calories;
  }

  public void setCalories(List<RecipeObjectNutrientsCalories> calories) {
    this.calories = calories;
  }

  public RecipeObjectNutrients dailyValues(List<RecipeObjectNutrientsCalories> dailyValues) {
    this.dailyValues = dailyValues;
    return this;
  }

  public RecipeObjectNutrients addDailyValuesItem(RecipeObjectNutrientsCalories dailyValuesItem) {
    if (this.dailyValues == null) {
      this.dailyValues = new ArrayList<RecipeObjectNutrientsCalories>();
    }
    this.dailyValues.add(dailyValuesItem);
    return this;
  }

  /**
   * An array containing information for this recipe&#x27;s daily recommended value of certain nutrients
   * @return dailyValues
   **/
  @JsonProperty("daily_values")
  @Schema(description = "An array containing information for this recipe's daily recommended value of certain nutrients")
  @Valid
  public List<RecipeObjectNutrientsCalories> getDailyValues() {
    return dailyValues;
  }

  public void setDailyValues(List<RecipeObjectNutrientsCalories> dailyValues) {
    this.dailyValues = dailyValues;
  }

  public RecipeObjectNutrients fat(List<RecipeObjectNutrientsCalories> fat) {
    this.fat = fat;
    return this;
  }

  public RecipeObjectNutrients addFatItem(RecipeObjectNutrientsCalories fatItem) {
    if (this.fat == null) {
      this.fat = new ArrayList<RecipeObjectNutrientsCalories>();
    }
    this.fat.add(fatItem);
    return this;
  }

  /**
   * An array containing information for fat found in this recipe
   * @return fat
   **/
  @JsonProperty("fat")
  @Schema(description = "An array containing information for fat found in this recipe")
  @Valid
  public List<RecipeObjectNutrientsCalories> getFat() {
    return fat;
  }

  public void setFat(List<RecipeObjectNutrientsCalories> fat) {
    this.fat = fat;
  }

  public RecipeObjectNutrients carbs(List<RecipeObjectNutrientsCalories> carbs) {
    this.carbs = carbs;
    return this;
  }

  public RecipeObjectNutrients addCarbsItem(RecipeObjectNutrientsCalories carbsItem) {
    if (this.carbs == null) {
      this.carbs = new ArrayList<RecipeObjectNutrientsCalories>();
    }
    this.carbs.add(carbsItem);
    return this;
  }

  /**
   * An array containing information for carbs found in this recipe
   * @return carbs
   **/
  @JsonProperty("carbs")
  @Schema(description = "An array containing information for carbs found in this recipe")
  @Valid
  public List<RecipeObjectNutrientsCalories> getCarbs() {
    return carbs;
  }

  public void setCarbs(List<RecipeObjectNutrientsCalories> carbs) {
    this.carbs = carbs;
  }

  public RecipeObjectNutrients vitamins(List<RecipeObjectNutrientsCalories> vitamins) {
    this.vitamins = vitamins;
    return this;
  }

  public RecipeObjectNutrients addVitaminsItem(RecipeObjectNutrientsCalories vitaminsItem) {
    if (this.vitamins == null) {
      this.vitamins = new ArrayList<RecipeObjectNutrientsCalories>();
    }
    this.vitamins.add(vitaminsItem);
    return this;
  }

  /**
   * An array containing information for vitamins found in this recipe
   * @return vitamins
   **/
  @JsonProperty("vitamins")
  @Schema(description = "An array containing information for vitamins found in this recipe")
  @Valid
  public List<RecipeObjectNutrientsCalories> getVitamins() {
    return vitamins;
  }

  public void setVitamins(List<RecipeObjectNutrientsCalories> vitamins) {
    this.vitamins = vitamins;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecipeObjectNutrients recipeObjectNutrients = (RecipeObjectNutrients) o;
    return Objects.equals(this.calories, recipeObjectNutrients.calories) &&
        Objects.equals(this.dailyValues, recipeObjectNutrients.dailyValues) &&
        Objects.equals(this.fat, recipeObjectNutrients.fat) &&
        Objects.equals(this.carbs, recipeObjectNutrients.carbs) &&
        Objects.equals(this.vitamins, recipeObjectNutrients.vitamins);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calories, dailyValues, fat, carbs, vitamins);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecipeObjectNutrients {\n");
    
    sb.append("    calories: ").append(toIndentedString(calories)).append("\n");
    sb.append("    dailyValues: ").append(toIndentedString(dailyValues)).append("\n");
    sb.append("    fat: ").append(toIndentedString(fat)).append("\n");
    sb.append("    carbs: ").append(toIndentedString(carbs)).append("\n");
    sb.append("    vitamins: ").append(toIndentedString(vitamins)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
