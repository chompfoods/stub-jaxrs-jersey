/*
 * Chomp Food & Recipe Database API Documentation
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. * Get a **Food Data API** key at **[https://chompthis.com/api](https://chompthis.com/api/)**. * Get a **Recipe Data API** key at **[https://chompthis.com/api/recipes](https://chompthis.com/api/recipes/)**.  ### Getting Started   * Subscribe to the **[Food Data API](https://chompthis.com/api/#pricing)** or the **[Recipe Data API](https://chompthis.com/api/recipes/#pricing)**.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**   * Recipe response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/example-recipe-response.json)**   * Error response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/error-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ### I'm a Premium subscriber. How do I access the API?   * All Premium subscribers must pass in a unique user ID for each user on their platform that is accessing data from the Chomp API. A user ID can be any string of letters and numbers that you assign to your user. Simply add \"user_id\" as a URL parameter when calling the API. *You must add a \"user_id\" URL parameter to every call you make to ANY endpoint.*     * **Example**        > ```ENDPOINT.php?api_key=API_KEY&code=CODE&user_id=USER_ID```  ### Helpful Links   * **Help & Support**     * [Knowledge Base &raquo;](https://desk.zoho.com/portal/chompthis/kb/chomp)     * [Support &raquo;](https://chompthis.com/api/ticket-new.php)     * [Client Center &raquo;](https://chompthis.com/api/manage.php)   * **Pricing**     * [Food Data API Subscription Options &raquo;](https://chompthis.com/api/)     * [Recipe Data API Subscription Options &raquo;](https://chompthis.com/api/recipes/)     * [Food Data API Cost Calculator &raquo;](https://chompthis.com/api/cost-calculator.php)     * [Recipe Data API Cost Calculator &raquo;](https://chompthis.com/api/recipes/cost-calculator.php)   * **Guidelines**     * [Terms & License &raquo;](https://chompthis.com/api/terms.php)     * [Attribution &raquo;](https://chompthis.com/api/docs/attribution.php) 
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.v3.oas.annotations.media.Schema;
import javax.validation.constraints.*;
import javax.validation.Valid;

/**
 * An object containing this recipe&#x27;s image URLs
 */
@Schema(description = "An object containing this recipe's image URLs")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen", date = "2021-03-09T22:27:18.219Z[GMT]")public class RecipeObjectMetaImages   {
  @JsonProperty("extra_large")
  private String extraLarge = null;

  @JsonProperty("large")
  private String large = null;

  @JsonProperty("standard")
  private String standard = null;

  @JsonProperty("grid_view")
  private String gridView = null;

  @JsonProperty("small")
  private String small = null;

  @JsonProperty("thumbnail")
  private String thumbnail = null;

  @JsonProperty("extra_small")
  private String extraSmall = null;

  public RecipeObjectMetaImages extraLarge(String extraLarge) {
    this.extraLarge = extraLarge;
    return this;
  }

  /**
   * Extra large recipe image
   * @return extraLarge
   **/
  @JsonProperty("extra_large")
  @Schema(description = "Extra large recipe image")
  public String getExtraLarge() {
    return extraLarge;
  }

  public void setExtraLarge(String extraLarge) {
    this.extraLarge = extraLarge;
  }

  public RecipeObjectMetaImages large(String large) {
    this.large = large;
    return this;
  }

  /**
   * Large recipe image
   * @return large
   **/
  @JsonProperty("large")
  @Schema(description = "Large recipe image")
  public String getLarge() {
    return large;
  }

  public void setLarge(String large) {
    this.large = large;
  }

  public RecipeObjectMetaImages standard(String standard) {
    this.standard = standard;
    return this;
  }

  /**
   * Standard recipe image
   * @return standard
   **/
  @JsonProperty("standard")
  @Schema(description = "Standard recipe image")
  public String getStandard() {
    return standard;
  }

  public void setStandard(String standard) {
    this.standard = standard;
  }

  public RecipeObjectMetaImages gridView(String gridView) {
    this.gridView = gridView;
    return this;
  }

  /**
   * Grid view recipe image
   * @return gridView
   **/
  @JsonProperty("grid_view")
  @Schema(description = "Grid view recipe image")
  public String getGridView() {
    return gridView;
  }

  public void setGridView(String gridView) {
    this.gridView = gridView;
  }

  public RecipeObjectMetaImages small(String small) {
    this.small = small;
    return this;
  }

  /**
   * Small recipe image
   * @return small
   **/
  @JsonProperty("small")
  @Schema(description = "Small recipe image")
  public String getSmall() {
    return small;
  }

  public void setSmall(String small) {
    this.small = small;
  }

  public RecipeObjectMetaImages thumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Thumbnail recipe image
   * @return thumbnail
   **/
  @JsonProperty("thumbnail")
  @Schema(description = "Thumbnail recipe image")
  public String getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }

  public RecipeObjectMetaImages extraSmall(String extraSmall) {
    this.extraSmall = extraSmall;
    return this;
  }

  /**
   * Extra small recipe image
   * @return extraSmall
   **/
  @JsonProperty("extra_small")
  @Schema(description = "Extra small recipe image")
  public String getExtraSmall() {
    return extraSmall;
  }

  public void setExtraSmall(String extraSmall) {
    this.extraSmall = extraSmall;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecipeObjectMetaImages recipeObjectMetaImages = (RecipeObjectMetaImages) o;
    return Objects.equals(this.extraLarge, recipeObjectMetaImages.extraLarge) &&
        Objects.equals(this.large, recipeObjectMetaImages.large) &&
        Objects.equals(this.standard, recipeObjectMetaImages.standard) &&
        Objects.equals(this.gridView, recipeObjectMetaImages.gridView) &&
        Objects.equals(this.small, recipeObjectMetaImages.small) &&
        Objects.equals(this.thumbnail, recipeObjectMetaImages.thumbnail) &&
        Objects.equals(this.extraSmall, recipeObjectMetaImages.extraSmall);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extraLarge, large, standard, gridView, small, thumbnail, extraSmall);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecipeObjectMetaImages {\n");
    
    sb.append("    extraLarge: ").append(toIndentedString(extraLarge)).append("\n");
    sb.append("    large: ").append(toIndentedString(large)).append("\n");
    sb.append("    standard: ").append(toIndentedString(standard)).append("\n");
    sb.append("    gridView: ").append(toIndentedString(gridView)).append("\n");
    sb.append("    small: ").append(toIndentedString(small)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    extraSmall: ").append(toIndentedString(extraSmall)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
